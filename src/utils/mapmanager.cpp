#include "utils/mapmanager.h"
#include "basictypes/hash.h"
#include "basictypes/io_utils.h"
#include "basictypes/minmaxbags.h"
#include "basictypes/misc.h"
#include "basictypes/osadapter.h"
#include "basictypes/timers.h"
#include "map.h"
#include "optimization/globaloptimizer.h"
#include "optimization/ippe.h"
#include "optimization/pnpsolver.h"
#include "utils/framematcher.h"
#include "utils/system.h"
#include <xflann/xflann.h>
#ifdef USE_OMP
#include <omp.h>
#endif

using namespace std;

namespace ucoslam {

MapManager::MapManager()
{
  _9129579858736004991 = IDLE;
  _14139181480504378433 = std::make_shared<LoopDetector>();
}

MapManager::~MapManager()
{
  stop();
}

void MapManager::setMap(std::shared_ptr<Map> _11093822290287 ) 
{
  _3370013330161650239 = _11093822290287;
  _14139181480504378433 = std::make_shared<LoopDetector>();
  _14139181480504378433->setParams(_11093822290287);
}

uint32_t MapManager::getLastAddedKeyFrameIdx() const 
{
  return _5097784010653838202;
}

bool MapManager::hasMap() const 
{
  return !(!_3370013330161650239);
}

int MapManager::newFrame(Frame &_175247760268, int32_t _10707402391749537314)
{
  _11028815416989897150 = _10707402391749537314;
  _9728777609121731073++;
  _1061304613240460439 = false;
  int _3209905912317706228 = 0;
  if( _9129579858736004991.load() == IDLE)
  {
#pragma message "warning : in non-sequential mode detected markers in loop closure are not proceesed properly?"
    if (System::getParams().reLocalizationWithMarkers)
      _8346364136266015358 = _14139181480504378433->detectLoopFromMarkers(
              _175247760268, _10707402391749537314);
    if (_8346364136266015358.foundLoop())
    {
      _14139181480504378433->correctMap(_8346364136266015358);
      _12244964123780599670( _175247760268, _8346364136266015358);
      _1061304613240460439 = true;
      _3209905912317706228 = 2;
    }
    else 
    {
      if(_668185896188051300(_175247760268, _10707402391749537314))
      {
        _9728777609121731073 = 0;
        Frame *_46082575805180420 = new Frame(_175247760268);
        _5860250156218117893.push(_46082575805180420);
        if(!_4098354751575524583.joinable())
          _12295639104386009589();
        _3209905912317706228 = 1;
      }
      else
      {
      }
    }
  }
  else 
  {
    if(_668185896188051300(_175247760268, _10707402391749537314)) 
    {
    }
    if (System::getParams().reLocalizationWithMarkers)
      _8346364136266015358 =_14139181480504378433->detectLoopFromMarkers(
          _175247760268, _10707402391749537314);
    if (_8346364136266015358.foundLoop())
    {
    }
  }
  return _3209905912317706228;
}

bool MapManager::mapUpdate()
{
  if(_9129579858736004991 != WAITINGFORUPDATE)
    return false;
  _9129579858736004991 = WORKING;
  _3370013330161650239->lock(
      __FUNCTION__, "/home/xj-zjd/work_space/self_work/ucoslam-1.0.8/src/utils/mapmanager.cpp",1190);

  if(_8346364136266015358.foundLoop())
  {
    _14139181480504378433->correctMap(_8346364136266015358);
    _12244964123780599670(_3370013330161650239->keyframes[_5097784010653838202],_8346364136266015358);
    _1061304613240460439 = true;

  } 
  else 
  {
    vector<std::pair<uint32_t, uint32_t>>_8817940606606562997;
    if(_15944432432468226297)
    {
      _15944432432468226297->getResults(_3370013330161650239);
      _8817940606606562997 =_15944432432468226297->getBadAssociations();
      _15944432432468226297 =nullptr;
    }

    _3370013330161650239->removeBadAssociations(_8817940606606562997, System::getParams().minNumProjPoints);
  }

  for (auto _2654435881 : _7124056634192091721)
    if(_3370013330161650239->map_points.is(_2654435881))
      _3370013330161650239->removePoint(_2654435881);
  _7124056634192091721.clear();
  _3370013330161650239->removeKeyFrames(_2225497823225366210, System::getParams().minNumProjPoints);

  for (auto _175247760268 : _2225497823225366210)
    _15327812228135655144.erase(_175247760268);

  if (_13990461397173511559)
  {
    cerr <<"JJKHKJHKJHKJHKJH SCALED!!!"<< endl;
    _1061304613240460439 =true;
  }

  _13909239728712143806 = _3370013330161650239->keyframes[_5097784010653838202].pose_f2g;
  _3370013330161650239->removeWeakConnections(_11028815416989897150, 8);
  _3370013330161650239->unlock(
          __FUNCTION__, "/home/xj-zjd/work_space/self_work/ucoslam-1.0.8/src/utils/mapmanager.cpp",1477);

  _7124056634192091721.clear();
  _2225497823225366210.clear();
  _9129579858736004991 =IDLE;

  return true;
}

void MapManager::start ()
{
  if(_4098354751575524583.joinable())
    return;

  _4090819199315697352 = false;
  _4098354751575524583 = std::thread([this] {
    this->_8669746328630631075();
  });
}

void MapManager:: stop ()
{

  if (_4098354751575524583.joinable()) 
  {
    _4090819199315697352 =true;
    _4098394392539754261 =false;
    _5860250156218117893.push(__null);
    _4098354751575524583.join();
  }
}

void MapManager::reset ()
{

  if (_4098354751575524583.joinable())
  {
    _4090819199315697352 =true;
    _5860250156218117893.push(__null);
    _4098354751575524583.join();
  }

  _4090819199315697352 = false;
  _5860250156218117893.clear();
  _9129579858736004991 =IDLE;
  _3370013330161650239.reset();
  _11028815416989897150 = std::numeric_limits<uint32_t>::max();
  _15944432432468226297.reset();
  _7124056634192091721.clear();
  _2225497823225366210.clear();

  std::map<uint32_t, uint32_t> _14515052224023340288;
  _14139181480504378433 = std::make_shared<LoopDetector>();
  _8346364136266015358 = LoopDetector::LoopClosureInfo();
  _5097784010653838202 = std::numeric_limits<uint32_t>::max();
  _13990461397173511559 = false;
  _4098394392539754261 = false;
}

Frame &MapManager::_1018502486064296669( Frame *_10801929782564841966) 
{

  auto _17591916323427771156 = [this](){
    int _8650310500306039378 =0;
    for (auto &_2654435878 : _3370013330161650239->map_markers)
      if (_2654435878.second.pose_g2m.isValid())
        _8650310500306039378++;
    return _8650310500306039378;
  };

  Frame &_16937201236903537060 =_3370013330161650239->addKeyFrame( *_10801929782564841966);
  _5097784010653838202 = _16937201236903537060.idx;
  _15327812228135655144.insert({_16937201236903537060.idx, 0});
  vector<uint32_t> _16997208802817240490;

  for (auto &_175247760268 : _15327812228135655144)
  {

    _175247760268.second++;

    if(_175247760268.second >3)
      _16997208802817240490.push_back(_175247760268.first);
  }

  for ( auto _2654435883 : _16997208802817240490)
    _15327812228135655144.erase(_2654435883);

  if (System::getParams().KPNonMaximaSuppresion)
    _16937201236903537060.nonMaximaSuppresion();

  int _1515507901219546526 = 0;

  for (size_t _2654435874 = 0; _2654435874 < _16937201236903537060.ids.size(); _2654435874++) 
  {
    if ( _16937201236903537060.ids[ _2654435874] !=std::numeric_limits<uint32_t>::max())
    {

      _3370013330161650239->addMapPointObservation(_16937201236903537060.ids[_2654435874],
                                 _16937201236903537060.idx, _2654435874);
      _1515507901219546526++;
    }
  }

  _13990461397173511559 =false;

  bool _14173211929012135714 =false;

  if ( _17591916323427771156() == 0 &&_3370013330161650239->map_points.size()!=0)

    _14173211929012135714 =true;

  for (size_t _2654435878 = 0;_2654435878 <_16937201236903537060.markers.size();_2654435878++)
  {
    auto&_6406328991171953231 =_3370013330161650239->addMarker(_16937201236903537060.markers[_2654435878]);

    _3370013330161650239->addMarkerObservation(_6406328991171953231.id, _16937201236903537060.idx);

    if (!_6406328991171953231.pose_g2m.isValid())
    {
      if (!_14173211929012135714 &&System::getParams().aruco_allowOneFrameInitialization)
      {
        if (_16937201236903537060.markers[_2654435878].poses.err_ratio >System::getParams().aruco_minerrratio_valid)

          _6406328991171953231.pose_g2m =_16937201236903537060.pose_f2g.inv()*
              _16937201236903537060.markers[_2654435878].poses.sols[0];
      }
    }

    auto _5829010262908049596 = [](Se3Transform &_2654435866, Se3Transform &_2654435867) {

          auto _175247759816 =_2654435866(cv::Range(0, 3),cv::Range(3, 4));
          auto _175247759819 = _2654435867(cv::Range(0, 3),cv::Range(3, 4));
          return cv::norm(_175247759816 - _175247759819);
    };

    if (!_6406328991171953231.pose_g2m.isValid() &&_6406328991171953231.frames.size() >=
        size_t(System::getParams().aruco_minNumFramesRequired))

    {
      vector<uint32_t> _6807035637074954094(_6406328991171953231.frames.begin(),
                                            _6406328991171953231.frames.end());
      std::vector<bool> _4942080627572011540(_6807035637074954094.size(),false);
      std::vector<uint32_t> _347298374087418072;
      _347298374087418072.reserve(_6406328991171953231.frames.size());

      for (size_t _2654435874 = 0;_2654435874 < _6807035637074954094.size();_2654435874++)
      {
        if(!_4942080627572011540[_2654435874])
        {
          pair<int, float> _706246351459982(-1, std::numeric_limits<float>::lowest());
          for (size_t _2654435875 =_2654435874 + 1;_2654435875 <_6807035637074954094.size();_2654435875++)
          {
            if (!_4942080627572011540[_2654435875])
            {
              float _2654435869 = _5829010262908049596( _3370013330161650239->keyframes[_6807035637074954094[_2654435874]].pose_f2g,
                          _3370013330161650239->keyframes[_6807035637074954094[_2654435875]].pose_f2g);

              if(_2654435869 > System::getParams().minBaseLine && _2654435869 >_706246351459982.first)
                _706246351459982 = {_2654435875, _2654435869};
            }
          }

          if (_706246351459982.first !=-1)
          {

            _347298374087418072.push_back(_6807035637074954094[_2654435874]);
            _347298374087418072.push_back(_6807035637074954094[_706246351459982.first]);
            _4942080627572011540[_2654435874] = true;
            _4942080627572011540[_706246351459982.first] = true;
          }
        }
      }

      if (_347298374087418072.size() >= size_t(System::getParams().aruco_minNumFramesRequired)) 
      {
        vector<ucoslam::MarkerObservation> _16750267944260729636;
        vector<se3> _11822840474894279984;
        for ( auto _2654435871 : _347298374087418072)
        {

          _16750267944260729636.push_back( _3370013330161650239->keyframes[_2654435871].getMarker(
                      _6406328991171953231.id));
          _11822840474894279984.push_back(_3370013330161650239->keyframes[_2654435871].pose_f2g);
        }

        auto _706246335742885 =ARUCO_bestMarkerPose(_16750267944260729636, _11822840474894279984,
                    _16937201236903537060.imageParams.undistorted(),_6406328991171953231.size);
        if(!_706246335742885.empty())
        {
          _6406328991171953231.pose_g2m =_706246335742885;
        }
      }
    }
  }

  if(_14173211929012135714 &&_17591916323427771156()> 0)
  {
    pair<double, double> _6868692417182700890(0, 0);
    for (auto &_2654435878 : _16937201236903537060.markers)
    {
      auto &_1522769364481108173 = _3370013330161650239->map_markers.at(_2654435878.id);
      if(!_1522769364481108173.pose_g2m.isValid())
        continue;

      cv::Point2f _3005399638492048904(0, 0);
      for (auto _2654435881 : _2654435878.und_corners)
        _3005399638492048904 + _2654435881;
      _3005399638492048904 *= 1. / 4.;
      double _6807036690967323841 = std::numeric_limits<double>::min();

      for (auto _2654435881 : _2654435878.und_corners)
        _6807036690967323841 =std::max(cv::norm(_3005399638492048904 - _2654435881),
                _6807036690967323841);

      vector<uint32_t> _46082575776210371 = _16937201236903537060.getIdOfPointsInRegion(
                  _3005399638492048904, _6807036690967323841);

      if (_46082575776210371.size()<5)
        continue;
      double _6806985421310060113 = 0;

      for (auto _11093822294347 : _46082575776210371)
      {

        _6806985421310060113 +=cv::norm(_16937201236903537060.pose_f2g *_3370013330161650239
                        ->map_points[_11093822294347].getCoordinates());
      }

      double _2899393255657923952 = _6806985421310060113 / double(_46082575776210371.size());
      cv::Mat _11093822386652 = _16937201236903537060.pose_f2g * _1522769364481108173.pose_g2m;
      double _15593881797400272442 =cv::norm(_11093822386652.rowRange(0, 3).colRange(3, 4));

      _6868692417182700890.first += _15593881797400272442 / _2899393255657923952;
      _6868692417182700890.second++;
    }

    if(_6868692417182700890.second ==0)
    {
      for (auto &_2654435878 : _3370013330161650239->map_markers)
        _2654435878.second.pose_g2m =se3();
    }
    else 
    {
      double _17370277987955713200 = _6868692417182700890.first / _6868692417182700890.second;
      for (auto &_175247759380 : _3370013330161650239->map_points)
        _175247759380.scalePoint(_17370277987955713200);
      for (auto &_46082543180066935 : _3370013330161650239->keyframes)
      {
        cv::Mat _2654435885 =_46082543180066935.pose_f2g.rowRange(0, 3).colRange(3, 4);
        _2654435885 *=_17370277987955713200;
      }
      _10758134674558762512(10);
      _13990461397173511559 =true;
    }
  }
  return _16937201236903537060;
}

void MapManager::_12295639104386009589 ()
{
  _4098394392539754261 =false;
  Frame *_10801929782564841966;
  _5860250156218117893.pop(_10801929782564841966);

  if (_10801929782564841966 ==__null)
    return;
  _9129579858736004991 = WORKING;
  _3370013330161650239->lock(__FUNCTION__, "/home/xj-zjd/work_space/self_work/ucoslam-1.0.8/src/"
                        "utils/mapmanager.cpp",3586);

  Frame &_16937201236903537060 = _1018502486064296669( _10801929782564841966);
  delete _10801929782564841966;
  if (System::getParams().reLocalizationWithKeyPoints)
    _8346364136266015358 =_14139181480504378433->detectLoopFromKeyPoints(
            _16937201236903537060, _11028815416989897150);

  _3370013330161650239->unlock(__FUNCTION__, "/home/xj-zjd/work_space/self_work/ucoslam-1.0.8/src/"
                        "utils/mapmanager.cpp",3649);
  _7124056634192091721 =_8352839093262355382();
  _3370013330161650239->removePoints(_7124056634192091721.begin(), _7124056634192091721.end(), false);
  _3370013330161650239->lock(__FUNCTION__, "/home/xj-zjd/work_space/self_work/ucoslam-1.0.8/src/"
                         "utils/mapmanager.cpp",3674);

  int _175247759447 = 20;
  if (_16937201236903537060.imageParams.isStereoCamera()) 
  {
    _175247759447 = 5;
    for (const auto&_11093822286451 : _8820655757626307961(_16937201236903537060))
    {
      auto &_3005399799907669332 =_3370013330161650239->addNewPoint(_16937201236903537060.fseq_idx);
      _3005399799907669332.setStereo(true);
      _3005399799907669332.setCoordinates(_11093822286451.pose);
      for (auto _11093822298882 : _11093822286451.frame_kpt)
        _3370013330161650239->addMapPointObservation(_3005399799907669332.id, _11093822298882.first,
                _11093822298882.second);
    }
  }

  auto _1516014567936766152 = _13988982604287804007(_16937201236903537060, _175247759447,
                                System::getParams().maxNewPoints);

  for (const auto&_11093822286451 : _1516014567936766152)
  {
    auto &_3005399799907669332 =_3370013330161650239->addNewPoint(_16937201236903537060.fseq_idx);
    _3005399799907669332.setCoordinates(_11093822286451.pose);
    for ( auto _11093822298882 : _11093822286451.frame_kpt)
      _3370013330161650239->addMapPointObservation(_3005399799907669332.id, _11093822298882.first,
              _11093822298882.second);
  }
  _3370013330161650239->unlock(__FUNCTION__, "/home/xj-zjd/work_space/self_work/ucoslam-1.0.8/"
                           "src/utils/mapmanager.cpp",3861);

  if (_5860250156218117893.empty())
  {
    _3370013330161650239->lock(__FUNCTION__, "/home/xj-zjd/work_space/self_work/ucoslam-1.0.8/src/"
                                             "utils/mapmanager.cpp",3883);
    auto _16937196451844060927 = _17400054198872595804(_16937201236903537060);
    _7124056634192091721.insert(_7124056634192091721.end(),
        _16937196451844060927.begin(),_16937196451844060927.end());

    _3370013330161650239->unlock(__FUNCTION__, "/home/xj-zjd/work_space/self_work/ucoslam-1.0.8/src/"
                          "utils/mapmanager.cpp",3924);
  }
  {
    int _706246332319248 = 0;
    for ( const auto&_175247759380 : _3370013330161650239->map_points)
      if ( _175247759380.isBad())
        _706246332319248++;
  }

  if(! _4098394392539754261 && _3370013330161650239->keyframes.size() > 1)
  {
    _11362629803814604768( _16937201236903537060.idx);
  }
  if (!_4098394392539754261) 
  {
    _2225497823225366210 =_12040998890815479673(_16937201236903537060.idx);
    for (auto _175247760268 : _2225497823225366210)
      _3370013330161650239->keyframes[_175247760268].setBad(true);
  }

  _9129579858736004991 = WAITINGFORUPDATE;
}

Se3Transform MapManager::getLastAddedKFPose()
{
  return _13909239728712143806;
}

bool MapManager::bigChange() const 
{
  return _1061304613240460439;
}

void MapManager::_8669746328630631075 ()
{

  while (!_4090819199315697352)
  {
    _12295639104386009589();
  }
}

set<uint32_t> MapManager::_12040998890815479673(uint32_t _13776525365726664701)
{

  set<uint32_t> _6840168697625608294;

  if (System::getParams().detectMarkers &&_3370013330161650239->map_markers.size()!=0)
  {
    vector<uint32_t> _16164152718668857888;
    _6840168697625608294 = _5122744303662631154(_13776525365726664701);
    for (auto _175247760268 : _6840168697625608294)
    {
      const auto&_6385920395377633917 =_3370013330161650239->keyframes[ _175247760268];
      std::set<uint32_t> _1518844499189060237;
      for (const auto &_2654435878 : _6385920395377633917.markers)
        for (auto _2654435871 : _3370013330161650239->map_markers[_2654435878.id].frames)
          _1518844499189060237.insert(_2654435871);
      _1518844499189060237.erase(_175247760268);

      bool _10524377175219822767 = false;
      for ( auto _706246330143240 : _1518844499189060237)
      {
        int _3563538109826541639 = 0;
        for ( const auto &_2654435878 : _3370013330161650239->keyframes[_706246330143240].markers)
          if (_6385920395377633917.getMarkerIndex(_2654435878.id)!=-1)
            _3563538109826541639++;
        if(_3563538109826541639 ==_6385920395377633917.markers.size())
        {
          _10524377175219822767 = true;
          break;
        }
      }

      if(!_10524377175219822767)
        _16164152718668857888.push_back(_175247760268);
    }

    for (auto _2654435871 : _16164152718668857888)
      _6840168697625608294.erase(_2654435871);
  }
  else if(System::getParams().detectKeyPoints)
    _6840168697625608294 =_5122744303662631154(_13776525365726664701);
  else if(System::getParams().detectMarkers)
    _6840168697625608294 =_17920146964341780569(_13776525365726664701);
  return _6840168697625608294;
}

set<uint32_t> MapManager::_17920146964341780569( uint32_t _13776525365726664701) {

  auto _706246308970949 =[](uint32_t _2654435866, uint32_t _2654435867) {
            if (_2654435866 > _2654435867)
              swap( _2654435866, _2654435867);
            uint64_t _11093821964632;
            uint32_t*_6807034398601546557 = (uint32_t *)&_11093821964632;
            _6807034398601546557[0] = _2654435867;
            _6807034398601546557[1] = _2654435866;
            return _11093821964632;
          };

  auto _46082575804458778 = _3370013330161650239->TheKpGraph.getNeighbors(_13776525365726664701);
  _46082575804458778.erase(_3370013330161650239->keyframes.front().idx);

  std::map<uint64_t, float> _124580014028079534;

  vector<uint32_t> _3005399810248445333( _46082575804458778.begin(), _46082575804458778.end());

  for (size_t _2654435874 = 0; _2654435874 < _3005399810248445333.size(); _2654435874++)
  {

    const auto &_175247759990 = _3370013330161650239->keyframes[_3005399810248445333[_2654435874]];
    for (size_t _2654435875 =_2654435874 + 1; _2654435875 < _3005399810248445333.size(); _2654435875++) 
    {
      const auto &_175247759989 = _3370013330161650239->keyframes[_3005399810248445333[ _2654435875]];

      _124580014028079534[_706246308970949(_3005399810248445333[ _2654435874] ,_3005399810248445333[_2654435875])]
          = cv::norm(_175247759990.pose_f2g.getTvec() - _175247759989.pose_f2g.getTvec());
    }
  }

  std::map<uint32_t, set<uint32_t>> _13773082371983786779;
  for (auto _706246330143240 : _46082575804458778)
  {
    for (auto _2654435878 : _3370013330161650239->keyframes[_706246330143240].markers)
      _13773082371983786779[_2654435878.id].insert(_706246330143240);
  }

  auto _10086624862567280113 = [&](uint32_t _706246330143240, const set<uint32_t>&_3005401603918369918){
    float _706246353090457 =0;
    for (auto _46082543263580169 : _3005401603918369918)
    {
      if(_46082543263580169 != _706246330143240)
        _706246353090457 +=_124580014028079534[_706246308970949(_706246330143240, _46082543263580169)];
    }
    return _706246353090457;
  };

  std::map<uint32_t, set<uint32_t>>_12358233879185425501;

  for (auto _175247759374 : _13773082371983786779) {
    if (_175247759374.second.size() <=size_t(System::getParams().maxVisibleFramesPerMarker)) 
    {
      _12358233879185425501[_175247759374.first].insert(_175247759374.second.begin(),
              _175247759374.second.end());
    }
    else 
    {
      vector<uint32_t> _6807035637074954094(_175247759374.second.begin(), _175247759374.second.end());
      pair<size_t, size_t> _6806984971934960832;
      float _706246332997485 = std::numeric_limits<float>::lowest();

      for (size_t _2654435874 =0;_2654435874 <_6807035637074954094.size();_2654435874++)
      {
        for (size_t _2654435875 = _2654435874 + 1; _2654435875 < _6807035637074954094.size(); _2654435875++)
        {
          auto _706246353090457 = _124580014028079534[ _706246308970949(_6807035637074954094[ _2654435874],
                                       _6807035637074954094[_2654435875])];

          if(_706246353090457 > _706246332997485)
          {
            _6806984971934960832 ={_6807035637074954094[_2654435874],
                    _6807035637074954094[_2654435875]};

            _706246332997485 =_706246353090457;
          }
        }
      }

      _12358233879185425501[_175247759374.first].insert(_6806984971934960832.first);
      _12358233879185425501[_175247759374.first].insert(_6806984971934960832.second);
      while (_12358233879185425501[_175247759374.first].size()<size_t(System::getParams().maxVisibleFramesPerMarker))
      {

        std::pair<uint32_t, float> _706246351459982(0, std::numeric_limits<float>::lowest());
        for (size_t _2654435874 = 0; _2654435874 < _6807035637074954094.size(); _2654435874++)
        {
          if( _12358233879185425501[_175247759374.first].count(_6807035637074954094[_2654435874]) == 0)
          {
            auto _2654435869 = _10086624862567280113( _6807035637074954094[ _2654435874],
                    _12358233879185425501[_175247759374.first]);

            if( _2654435869 > _706246351459982.second)
              _706246351459982 ={_6807035637074954094[_2654435874],_2654435869};
          }
        }

        _12358233879185425501[_175247759374.first].insert(
            _706246351459982.first);
      }
    }
  }

  std::set<uint32_t> _16997237651734773759;

  for ( auto _175247759379 : _12358233879185425501)
    _16997237651734773759.insert( _175247759379.second.begin(), _175247759379.second.end());

  std::set<uint32_t> _16997209188207231919;
  for (auto _706246330143240 : _46082575804458778)
    if (_16997237651734773759.count(_706246330143240) ==0)
      _16997209188207231919.insert( _706246330143240);

  return _16997209188207231919;
}

set<uint32_t> MapManager::_5122744303662631154(uint32_t _13776525365726664701, int _11093822290295)
{
  set<uint32_t> _632169897324785074;
  if (_3370013330161650239->keyframes.size() < size_t(System::getParams().minNumProjPoints))
    return{};

  auto _46082575804458778 =_3370013330161650239->TheKpGraph.getNeighbors(_13776525365726664701);
  _46082575804458778.erase(0);
  _46082575804458778.erase(1);
  for (auto _11093821947229 : _15327812228135655144)
    _46082575804458778.erase(_11093821947229.first);

  vector<pair<float, uint32_t>>
      _12397058489822015781;

  int _16997202002988998048 =System::getParams().minNumProjPoints;
  for (auto _706246330143240 : _46082575804458778)
  {
    int _5934594266774536213 =0,_6807035158273032389 = 0;
    auto &_46082543180066935 =_3370013330161650239->keyframes[ _706246330143240];
    if ( _46082543180066935.isBad())
      continue;

    for (size_t _2654435874 =0;_2654435874 < _46082543180066935.ids.size();_2654435874++)
    {
      if (_46082543180066935.ids[_2654435874]!= std::numeric_limits<uint32_t>::max())
      {
        auto &_175247759380 =_3370013330161650239->map_points[_46082543180066935.ids[_2654435874]];
        if (_175247759380.isBad())
          continue;

        _6807035158273032389++;
        int _706246332142289 =0;

        if (_175247759380.getNumOfObservingFrames()>size_t(_16997202002988998048))
        {

          for (const auto &_11093822384882 : _175247759380.getObservingFrames())
          {
            if(_11093822384882.first !=_706246330143240 &&!_3370013330161650239->keyframes[_11093822384882.first].isBad())
              if(_3370013330161650239->keyframes[_11093822384882.first].und_kpts[_11093822384882.second].octave <=
                      _46082543180066935.und_kpts[_2654435874].octave) 
              {
                _706246332142289++;
                if (_706246332142289 >= _16997202002988998048) 
                {
                  _5934594266774536213++;
                  break;
                }
              }
          }
        }
      }
    }

    float _320895158734137168 = float(_5934594266774536213) /float(_6807035158273032389);

    if (_320895158734137168 > System::getParams().KFCulling)
    {
      _12397058489822015781.push_back({_320895158734137168, _706246330143240});
    }
  }

  if(_12397058489822015781.size()>_11093822290295)
  {
    std::sort(_12397058489822015781.begin(), _12397058489822015781.end(),[](const pair<float, uint32_t>
                &_2654435866,const pair<float, uint32_t>&_2654435867){
          return _2654435866.first >_2654435867.first;
        });

    _12397058489822015781.resize(_11093822290295);
  }
  for (auto _706246328206728 : _12397058489822015781)
  {
    _632169897324785074.insert(_706246328206728.second);
  }
  return _632169897324785074;
}

vector<uint32_t> MapManager::_8352839093262355382()
{
  std::vector<uint32_t> _11398643651601173081;
  for (auto &_175247759380 : _3370013330161650239->map_points)
  {
    if (!_175247759380.isStable() &&!_175247759380.isBad())
    {
      uint32_t _3005399801879480675 =std::min(uint32_t(3),_3370013330161650239->keyframes.size());
      if(_175247759380.isStereo())
        _3005399801879480675 =std::min(uint32_t(2),_3370013330161650239->keyframes.size());
      if( _175247759380.getVisibility()<0.25)
        _175247759380.setBad(true);
      else if(_175247759380.kfSinceAddition >= 1 && _175247759380.getNumOfObservingFrames() < _3005399801879480675)
        _175247759380.setBad(true);
      else if ( _175247759380.kfSinceAddition >= 3)
        _175247759380.setStable(true);
      if(_175247759380.kfSinceAddition <5)
        _175247759380.kfSinceAddition++;
    }
    if(_175247759380.isStable())
      if(_175247759380.getVisibility() < 0.1)
        _175247759380.setBad(true);
    if ( _175247759380.isBad())
      _11398643651601173081.push_back(_175247759380.id);
  }

  return _11398643651601173081;
}

bool MapManager::_668185896188051300(const Frame &_16997228172148074791, uint32_t _16940374161587532565)
{

  bool _46082575734385716 = false, _706246335356026 =false,
       _6807035406428482711 =false;
  if(_16997228172148074791.imageParams.isStereoCamera())
    _6807035406428482711 =
        _11138245882866350888(_16997228172148074791, _16940374161587532565);
  if (System::getParams().detectKeyPoints)
    _46082575734385716 =_16884568726948844929(_16997228172148074791, _16940374161587532565);

  if(!_46082575734385716 &&System::getParams().detectMarkers)
    _706246335356026 =_5906010176873986459(_16997228172148074791, _16940374161587532565);
  return (_46082575734385716 || _706246335356026 ||_6807035406428482711);
}

bool MapManager :: _11138245882866350888 (const Frame &_16997228172148074791, uint32_t _16940374161587532565 )
{
  if(!_16997228172148074791.imageParams.isStereoCamera())
    return false;
  int _13282101351954432384 = 0;
  int _1339477524456856999 = 0;
  for (size_t _2654435874 = 0; _2654435874 < _16997228172148074791.und_kpts.size();_2654435874++) {
    if(_16997228172148074791.getDepth(_2654435874) >  0 && _16997228172148074791.imageParams.isClosePoint(
             _16997228172148074791.getDepth( _2654435874)))
    {
      if(_16997228172148074791.ids[_2654435874] != std::numeric_limits<uint32_t>::max()
              &&!_16997228172148074791.flags[_2654435874].is(Frame::FLAG_OUTLIER))
        _1339477524456856999++;
      else
        _13282101351954432384++;
    }
  }
  if((_1339477524456856999 <180 *System::getParams().KFMinConfidence)&&
       (_13282101351954432384 >120 *System::getParams().KFMinConfidence))
    return true;
  else
    return false;
}

bool MapManager::_5906010176873986459( const Frame &_16997228172148074791, uint32_t _16940374161587532565)
{

  if (_3370013330161650239->map_markers.size() == 0)
    return false;
  for ( auto _2654435878 : _16997228172148074791.markers)
  {
    if ( _3370013330161650239->map_markers.count(_2654435878.id)== 0)
    {
      return true;
    }
  }
  for (auto _2654435878 : _16997228172148074791.markers) 
  {
    if (_3370013330161650239->map_markers.count(_2654435878.id)!=0) 
    {
      if (_3370013330161650239->map_markers.at(_2654435878.id).pose_g2m.isValid()==false)
      {
        if ((_16997228172148074791.getMarkerPoseIPPE(_2654435878.id).err_ratio >
                System::getParams().aruco_minerrratio_valid)&&
            System::getParams().aruco_allowOneFrameInitialization) 
        {
          return true;
        }
      }
    }
  }

  for (auto _2654435878 : _16997228172148074791.markers)
  {
    if(_3370013330161650239->map_markers.count(_2654435878.id) != 0)
    {
      const auto&_3005399774724453457 = _3370013330161650239->map_markers.at(_2654435878.id);
      if (_3005399774724453457.frames.size()>= System::getParams().maxVisibleFramesPerMarker)
        continue;
      if (_3005399774724453457.pose_g2m.isValid())
      {
        float _6807036689763440555 =std::numeric_limits<float>::max();
        for (auto _2654435871 : _3005399774724453457.frames) 
        {
          float _706246353090457 =cv::norm(_3370013330161650239->keyframes[_2654435871]
                              .pose_f2g.getTvec(),_16997228172148074791.pose_f2g.getTvec());
          if (_706246353090457 < _6807036689763440555)
            _6807036689763440555 = _706246353090457;
        }
        if ( _6807036689763440555 >=System::getParams().minBaseLine)
        {
          return true;
        }
      }
    }
  }

  if ( _16997228172148074791.kpts.size() !=0)
    return false;
  float _16940368387347594694 = cv::norm(_16997228172148074791.pose_f2g.getTvec(),
          _3370013330161650239->keyframes[_16940374161587532565].pose_f2g.getTvec());
  if(_16940368387347594694 > System::getParams().minBaseLine)
  {
    return true;
  }
  return false;
}

bool MapManager::_16884568726948844929(const Frame &_16997228172148074791,
                          uint32_t _16940374161587532565)
{

  auto _8222792191690573285 =[](const Frame &_2654435871) {
        int _2654435879 = 0;
        for (size_t _2654435874 =0; _2654435874 < _2654435871.ids.size(); _2654435874++)
          if( _2654435871.ids[_2654435874]!= std::numeric_limits<uint32_t>::max())
            if(!_2654435871.flags[_2654435874].is(Frame::FLAG_OUTLIER))
              _2654435879++;
        return _2654435879;
  };

  int _8367785432631711677 = _8222792191690573285( _16997228172148074791);
  if( _8367785432631711677 < 20)
    return false;

  float _10934236797308178385 =System::getParams().KFMinConfidence;
  uint32_t _3005399795202072660 =3;
  if (_3370013330161650239->keyframes.size() ==2)
  {
    _3005399795202072660 =2;
  }
  int _16937194960156429046 = 0;
  const auto &_3005399819707726498 = _3370013330161650239->keyframes[_16940374161587532565];
  for (auto _175247760135 : _3005399819707726498.ids)
  {
    if(_175247760135 != std::numeric_limits<uint32_t>::max())
    {
      const auto &_706246332996939 = _3370013330161650239->map_points[ _175247760135];
      if( _706246332996939.isBad())
        continue;
      if(_706246332996939.getNumOfObservingFrames() < _3005399795202072660)
        continue;
      _16937194960156429046++;
    }
  }

  if (_8367785432631711677 < float( _16937194960156429046) * _10934236797308178385)
    return true;
  return false;
}

vector<uint32_t> MapManager:: _489363023531416435(Frame &_16935669825082873233,
                        size_t _1522768771151786324)
{
  if(_3370013330161650239->keyframes.size() <=2)
    return {_3370013330161650239->keyframes.front().idx};
  vector<uint32_t> _1515469360845371082 = _3370013330161650239->TheKpGraph.getNeighborsV(_16935669825082873233.idx);
  size_t _2654435874 =0;
  while (_2654435874 < _1515469360845371082.size())
  {
    if(_3370013330161650239->keyframes[_1515469360845371082[_2654435874]].isBad())
    {
      std::swap(_1515469360845371082[_2654435874],_1515469360845371082.back());
      _1515469360845371082.pop_back();
    }
    else
      _2654435874++;
  }

  std::sort(_1515469360845371082.begin(),_1515469360845371082.end(),[&](uint32_t _2654435866, uint32_t _2654435867) {

             return _3370013330161650239->TheKpGraph.getWeight(_2654435866, _16935669825082873233.idx) >
                    _3370013330161650239->TheKpGraph.getWeight(_2654435867, _16935669825082873233.idx);
           });

  vector<uint32_t> _18082515013534369065;
  for (auto _46082575804458778 : _1515469360845371082)
  {
    auto _542441255932743577 = _3370013330161650239->getFrameMedianDepth(_46082575804458778);
    auto _16940368387495537784 = cv::norm(_16935669825082873233.getCameraCenter() -
                    _3370013330161650239->keyframes[_46082575804458778].getCameraCenter());

    float _706246339573489 = _16935669825082873233.getCameraDirection().dot(
            _3370013330161650239->keyframes[_46082575804458778].getCameraDirection());
    if (_706246339573489 >0.6 && _16940368387495537784 / _542441255932743577 >
            System::getParams().baseline_medianDepth_ratio_min)
      _18082515013534369065.push_back(_46082575804458778);
    if(_18082515013534369065.size() >= _1522768771151786324)
      break;
  }
  return _18082515013534369065;
}

vector<uint32_t> MapManager::_17400054198872595804(Frame &_9083779410036955469)
{

  auto _4969073986308462195 = _3370013330161650239->TheKpGraph.getNeighbors(_9083779410036955469.idx);
  set<uint32_t> _8613511226855067609;
  vector<uint32_t> _18198621160182713342;
  for (auto _2654435879 : _4969073986308462195)
    if(!_3370013330161650239->keyframes[_2654435879].isBad())
      _8613511226855067609.insert(_2654435879);
  int _1517243165919133649 =0,
      _3005399801165696099 =0;

  float _175247759809 = 2.5;
  vector<uint32_t> _13928263410240979211 = _9083779410036955469.getMapPoints();
  for (auto _11093822376141 : _8613511226855067609)
  {
    Frame &_16997205220810934492 =_3370013330161650239->keyframes[_11093822376141];
    cv::Point3f _16987816518187263273 =_16997205220810934492.getCameraCenter();

    for (auto _706246342527108 : _13928263410240979211) {
      if(!_3370013330161650239->map_points.is(_706246342527108))
        continue;

      MapPoint &_175247761420 =_3370013330161650239->map_points[_706246342527108];
      if(_175247761420.isBad())
        continue;
      if (_175247761420.frames.count(_16997205220810934492.idx))
        continue;
      cv::Point2f _11093822300120 =_16997205220810934492.project(_175247761420.getCoordinates(),true, true);
      if (isnan(_11093822300120.x))
        continue;

      float _706246353090457 =cv::norm(_16987816518187263273 - _175247761420.getCoordinates());
      if (_706246353090457 <0.8f * _175247761420.getMinDistanceInvariance()||_706246353090457 >
              1.2f * _175247761420.getMaxDistanceInvariance())
        continue;
      if (_175247761420.getViewCos(_16987816518187263273) <0.5)
        continue;
      int _16341578645184805751 = _9083779410036955469.predictScale(_706246353090457, _175247761420.getMaxDistanceInvariance());
      float _3005399817140385615 = _175247759809 * _16997205220810934492.scaleFactors[ _16341578645184805751];
      if ( _175247761420.getViewCos( _16987816518187263273) < 0.98)
        _3005399817140385615 *= 1.4f;

      vector<uint32_t> _3005399810012306975 = _16997205220810934492.getKeyPointsInRegion(
                  _11093822300120, _3005399817140385615,
                  _16341578645184805751 - 1, _16341578645184805751);

      pair<float, int> _706246351459982(System::getParams().maxDescDistance +1e-3,-1);
      for (auto _46082543320896749 : _3005399810012306975)
      {
        float _16940392174182767813 = _175247761420.getDescDistance(_16997205220810934492.desc.row( _46082543320896749));
        if( _16940392174182767813 < _706246351459982.first)
          _706246351459982 = { _16940392174182767813, _46082543320896749};
      }
      if( _706246351459982.second != -1)
      {
        if(_16997205220810934492.ids[_706246351459982.second]!=
                std::numeric_limits<uint32_t>::max()) 
        {
          _3370013330161650239->fuseMapPoints(_16997205220810934492.ids[_706246351459982.second],
              _175247761420.id, false);
          _18198621160182713342.push_back(_175247761420.id);
          _175247761420.setBad(true);
          _3005399801165696099++;
        }
        else
        {
          _3370013330161650239->addMapPointObservation(
                  _175247761420.id, _16997205220810934492.idx,
                  _706246351459982.second);
          _1517243165919133649++;
        }
      }
    }
  }

  std::vector<uint32_t> _16997228247169055403 = _3370013330161650239->getMapPointsInFrames(
                  _8613511226855067609.begin(), _8613511226855067609.end());

  float _13976965695925359212 = log(_9083779410036955469.getScaleFactor());
  cv::Point3f _16987816518187263273 = _9083779410036955469.getCameraCenter();
  for (auto &_706246332803866 : _16997228247169055403)
  {
    auto&_175247761420 = _3370013330161650239->map_points[_706246332803866];
    if(_175247761420.isBad())
      continue;
    if (_175247761420.isObservingFrame(_9083779410036955469.idx))
      continue;
    cv::Point2f _11093822300120 = _9083779410036955469.project(_175247761420.getCoordinates(),
                true, true);

    if (isnan(_11093822300120.x))
      continue;

    float _706246353090457 = cv::norm( _16987816518187263273 - _175247761420.getCoordinates());
    if (_706246353090457 < 0.8f * _175247761420.getMinDistanceInvariance() ||
        _706246353090457 > 1.2f * _175247761420.getMaxDistanceInvariance())
      continue;

    if ( _175247761420.getViewCos(_16987816518187263273) < 0.5)
      continue;

    int _16341578645184805751 = _9083779410036955469.predictScale(
                _706246353090457, _175247761420.getMaxDistanceInvariance());

    const float _3005399817140385615 = _175247759809 *
            _9083779410036955469.scaleFactors[_16341578645184805751];

    vector<uint32_t> _3005399810012306975 = _9083779410036955469.getKeyPointsInRegion(
            _11093822300120, _3005399817140385615, _16341578645184805751 - 1, _16341578645184805751);

    pair<float, int> _706246351459982(System::getParams().maxDescDistance + 1e-3,-1);
    for ( auto _46082543320896749 : _3005399810012306975)
    {
      float _16940392174182767813 = _175247761420.getDescDistance( _9083779410036955469.desc.row( _46082543320896749));
      if (_16940392174182767813 < _706246351459982.first)
        _706246351459982 ={ _16940392174182767813, _46082543320896749};
    }

    if(_706246351459982.second !=-1) 
    {

      if(_9083779410036955469.ids[ _706246351459982.second] != std::numeric_limits<uint32_t>::max())
      {
        _3370013330161650239->fuseMapPoints(_9083779410036955469.ids[_706246351459982.second],_175247761420.id, false);
        _18198621160182713342.push_back(_175247761420.id);
        _175247761420.setBad(true);
        _3005399801165696099++;
      }
      else 
      {
        _3370013330161650239->addMapPointObservation(_175247761420.id, _9083779410036955469.idx,
                                   _706246351459982.second);
        _1517243165919133649++;
      }
    }
  }
  return _18198621160182713342;
}

std::list<MapManager::NewPointInfo> MapManager::_8820655757626307961( Frame &_16935669825082873233)
{

  if(! _16935669825082873233.imageParams.isStereoCamera())
    return {};

  struct _14315452481299618814 {

    float _4616368654387135743;
    size_t _5734006271547469041;
    bool operator<(const _14315452481299618814 &_175247760080) const 
    {
      return _4616368654387135743 < _175247760080._4616368654387135743;
    }

    bool operator>( const _14315452481299618814 &_175247760080) const 
    {

      return _4616368654387135743 >

             _175247760080._4616368654387135743;
    }
  };

  if (System::getParams().KPNonMaximaSuppresion)
    _16935669825082873233.nonMaximaSuppresion();
  vector<_14315452481299618814> _7619806436859450970;

  _7619806436859450970.reserve(_16935669825082873233.ids.size());

  for (size_t _2654435874 = 0; _2654435874 < _16935669825082873233.ids.size(); _2654435874++)
    if( _16935669825082873233.ids[_2654435874] ==std::numeric_limits<uint32_t>::max() &&
            !_16935669825082873233.flags[_2654435874].is(Frame::FLAG_NONMAXIMA) &&
            _16935669825082873233.getDepth(_2654435874) > 0 &&
            _16935669825082873233.imageParams.isClosePoint(_16935669825082873233.getDepth(_2654435874)))

      _7619806436859450970.push_back({_16935669825082873233.getDepth(_2654435874),_2654435874});

  if (_7619806436859450970.size() > ucoslam::System::getParams().maxNewPoints)
  {

    std::random_shuffle(_7619806436859450970.begin(), _7619806436859450970.end());
  }

  _7619806436859450970.resize(std::min(_7619806436859450970.size(),
              size_t(ucoslam::System::getParams().maxNewPoints)));
# 9689 "/home/xj-zjd/work_space/self_work/ucoslam-1.0.8/src/utils/mapmanager.cpp"
  std::list<MapManager::NewPointInfo> _4622533121193472218;
  auto _16937226146608657651 = _16935669825082873233.pose_f2g.inv();
  for (auto &_11093822348564 : _7619806436859450970)
  {
    MapManager::NewPointInfo _16937373753124017671;

    _16937373753124017671.pose = _16937226146608657651 *
        _16935669825082873233.get3dStereoPoint(_11093822348564._5734006271547469041);
    _16937373753124017671.frame_kpt.push_back({_16935669825082873233.idx, _11093822348564._5734006271547469041});
    _16937373753124017671.isStereo = true;
    _4622533121193472218.push_back(_16937373753124017671);
    ;
  }
  return _4622533121193472218;
}

std::vector<MapManager::NewPointInfo> MapManager::_13988982604287804007(Frame &_16935669825082873233, 
        uint32_t _175247759447,uint32_t _1522768807369958241) 
{
  if(_16935669825082873233.ids.size() == 0)
    return {};

  struct _3005401605294789533 {
    _3005401605294789533(uint32_t _13388472731815556334,
                         uint32_t _1513938270035531338,
                         uint32_t _7736357855027240696,
                         cv:: Point3f _11093821910177,
                         float _16937031022796222526)

    {
      _18030119007246525509 = _13388472731815556334;
      _681165095198498101 = _1513938270035531338;
      _10333569979786346575 = _7736357855027240696;
      _16701867013855893038 = _11093821910177;
      _11690406023733055431 = _16937031022796222526;
    }

    uint32_t _18030119007246525509;
    uint32_t _681165095198498101;
    uint32_t _10333569979786346575;
    cv::Point3f _16701867013855893038;
    float _11690406023733055431;
  };

  Se3Transform _3005399792197371186 = _16935669825082873233.pose_f2g.inv();
  vector<uint32_t> _13920901643832806846 = _489363023531416435(_16935669825082873233, _175247759447);
  vector<vector<_3005401605294789533>> _8361296960174125730(_13920901643832806846.size());
  FrameMatcher _16937386958649118140;
  _16937386958649118140.setParams(_16935669825082873233, FrameMatcher::MODE_UNASSIGNED,
      System::getParams().maxDescDistance *2,0.6, true, std::numeric_limits<int>::max());


#pragma omp parallel for
  for (int _175247759374 = 0; _175247759374 <int( _13920901643832806846.size());_175247759374++)
  {
    Frame &_3005401603918369727 = _3370013330161650239->keyframes[_13920901643832806846[ _175247759374]];
    cv::Mat _706246338817862 =_3005401603918369727.pose_f2g * (_16935669825082873233.pose_f2g.inv());

    vector<cv::DMatch> _6807036698572949990 =_16937386958649118140.matchEpipolar(_3005401603918369727, 
            FrameMatcher::MODE_UNASSIGNED,_706246338817862);

    vector<cv::Point3f> _11093822296219 = Triangulate(_16935669825082873233, _3005401603918369727,
                        _706246338817862, _6807036698572949990);

    float _17138640259027827142 = 1.5f * System::getParams().scaleFactor;
    for ( size_t _2654435874 =0;_2654435874 <_6807036698572949990.size();_2654435874++)
      if (!isnan(_11093822296219[_2654435874].x))
      {
        cv::Point3f _16937228587826293356 = _3005399792197371186 * _11093822296219[ _2654435874];
        float _3005399609920862424 =cv::norm(_16937228587826293356 - _16935669825082873233.getCameraCenter());
        float _3005399609920862950 =cv::norm(_16937228587826293356 - _3005401603918369727.getCameraCenter());
        if (_3005399609920862424 == 0 || _3005399609920862950 ==0)
          continue;
        const float _1520116976143911186 = _3005399609920862424 / _3005399609920862950;
        int _15879076394176213166 = _16935669825082873233.und_kpts[_6807036698572949990[_2654435874].trainIdx].octave;
        int _5942253698289074032 =_3005401603918369727.und_kpts[ _6807036698572949990[_2654435874].queryIdx].octave;
        const float _17138640781187484270 = _16935669825082873233.scaleFactors[_15879076394176213166]
                / _3005401603918369727.scaleFactors[_5942253698289074032];

        if (_1520116976143911186 * _17138640259027827142 < _17138640781187484270 ||
            _1520116976143911186 >_17138640781187484270 * _17138640259027827142)
          continue;

        _8361296960174125730[ _175247759374].push_back(_3005401605294789533(uint32_t(_6807036698572949990[_2654435874].trainIdx),
                _3005401603918369727.idx, uint32_t(_6807036698572949990[_2654435874].queryIdx),
                _16937228587826293356, _6807036698572949990[_2654435874].distance));
      }
  }

  auto _5829441678613027716 =[ ](const uint32_t &_11093821926013){
    std::stringstream _706246330191125;
    _706246330191125 <<_11093821926013;
    return _706246330191125.str();
  };

  std::map<uint32_t, vector<_3005401605294789533>> _11350249437170142625;
  for (size_t _175247759374 = 0; _175247759374 < _8361296960174125730.size(); _175247759374++)
    for (const auto &_46082575882272165 : _8361296960174125730[_175247759374])
      _11350249437170142625[_46082575882272165._18030119007246525509].push_back(_46082575882272165);

  std::vector<MapManager::NewPointInfo> _4622533121193472218;

  for (auto &_175247760278 : _11350249437170142625)
  {

    MapManager::NewPointInfo _16937373753124017671;
    int _16940367568811450714 = -1;
    int _14213191106379209118 = std::numeric_limits<int>::max();
    for (size_t _175247762932 =0;_175247762932 < _175247760278.second.size(); _175247762932++)
    {
      const auto &_16997228172148075180 = _3370013330161650239->keyframes[ _175247760278.second[_175247762932]._681165095198498101]
                  .und_kpts[_175247760278.second[_175247762932]._10333569979786346575];
      if ( _16997228172148075180.octave < _14213191106379209118)
      {
        _16940367568811450714 = _175247762932;
      }
    }

    const auto &_14213185128593570709 = _175247760278.second[_16940367568811450714];
    _16937373753124017671.pose = _14213185128593570709._16701867013855893038;
    _16937373753124017671.dist =_14213185128593570709._11690406023733055431;
    _16937373753124017671.frame_kpt.push_back({ _16935669825082873233.idx, _175247760278.first});

    for (auto _11093822383940 : _175247760278.second)
      _16937373753124017671.frame_kpt.push_back( {_3370013330161650239->keyframes[_11093822383940._681165095198498101].idx,
           _11093822383940._10333569979786346575});
    _4622533121193472218.push_back(_16937373753124017671);
    ;
  }

  if (_4622533121193472218.size() > _1522768807369958241)
  {
    std::sort(_4622533121193472218.begin(), _4622533121193472218.end(),[](const MapManager::NewPointInfo &_2654435866,
            const MapManager::NewPointInfo &_2654435867){
              return _2654435866.dist <_2654435867.dist;
            });

    _4622533121193472218.resize(_1522768807369958241);
  }

  return _4622533121193472218;
}

void MapManager::_10758134674558762512(int _3005399800582873013)
{

  GlobalOptimizer::ParamSet _3005399798454910266(debug::Debug::getLevel()>=11);

  _3005399798454910266.fixFirstFrame = true;
  _3005399798454910266.nIters = _3005399800582873013;
  _3005399798454910266.markersOptWeight = System::getParams().markersOptWeight;
  _3005399798454910266.minMarkersForMaxWeight =System::getParams().minMarkersForMaxWeight;
  _3005399798454910266.InPlaneMarkers =System::getParams().inPlaneMarkers;
  if(_3005399798454910266.fixed_frames.size() == 0 &&_3370013330161650239->map_markers.size()==0)
  {
    auto _175247760151 =_3370013330161650239->keyframes.begin();
    _3005399798454910266.fixed_frames.insert(_175247760151->idx);
    ++_175247760151;
    if(_175247760151 !=_3370013330161650239->keyframes.end())
    {
      if (_3005399798454910266.used_frames.count(_175247760151->idx) ||
          _3005399798454910266.used_frames.size() ==0)
        _3005399798454910266.fixed_frames.insert(_175247760151->idx);
    }
  }

  _15944432432468226297 =GlobalOptimizer::create(System::getParams().global_optimizer);
  _15944432432468226297->setParams(_3370013330161650239, _3005399798454910266);
  _15944432432468226297->optimize();
  _15944432432468226297->getResults(_3370013330161650239);
  _3370013330161650239->removeBadAssociations(_15944432432468226297->getBadAssociations(), System::getParams().minNumProjPoints);
  _15944432432468226297 =nullptr;
}

void MapManager::_11362629803814604768 (uint32_t _16937255065087280628, int _3005399802176474746 )
{

  bool _16116701644373052209 = false;
  for (auto _2654435871 : _3370013330161650239->keyframes)
    if(_2654435871.imageParams.isStereoCamera())
    {
      _16116701644373052209 = true;
      break;
    }
  std::set<uint32_t> _46082575804458778 =_3370013330161650239->TheKpGraph.getNeighbors(_16937255065087280628, true);
  GlobalOptimizer::ParamSet _3005399798454910266(debug::Debug::getLevel() >= 11);
  _3005399798454910266.markersOptWeight =System::getParams().markersOptWeight;
  _3005399798454910266.minMarkersForMaxWeight = System::getParams().minMarkersForMaxWeight;
  _3005399798454910266.used_frames.insert(_46082575804458778.begin(), _46082575804458778.end());
  _3005399798454910266.fixFirstFrame =true;
  _3005399798454910266.nIters =_3005399802176474746;
  _3005399798454910266.InPlaneMarkers = System::getParams().inPlaneMarkers;
  if(_3005399798454910266.fixed_frames.size()==0 &&_3370013330161650239->map_markers.size()==0 &&!_16116701644373052209)
  {

    auto _175247760151 = _3370013330161650239->keyframes.begin();
    _3005399798454910266.fixed_frames.insert(_175247760151->idx);
    ++_175247760151;
    if(_175247760151 != _3370013330161650239->keyframes.end())
    {
      if (_3005399798454910266.used_frames.count(_175247760151->idx))
        _3005399798454910266.fixed_frames.insert(_175247760151->idx);
    }
  }

  _15944432432468226297 =GlobalOptimizer::create(System::getParams().global_optimizer);
  _15944432432468226297->setParams(_3370013330161650239, _3005399798454910266);
  _15944432432468226297->optimize(&_4098394392539754261);
}

void MapManager::toStream (std::ostream &_11093822381060 )
{

  while (_9129579858736004991 == WORKING)
    std::this_thread::sleep_for(std::chrono::milliseconds(10));
  mapUpdate();
  uint64_t _11093822380353 =1823312417;
  _11093822381060.write((char *)&_11093822380353,sizeof(_11093822380353));
  _11093822381060.write((char *)&_5097784010653838202, sizeof(_5097784010653838202));
  _11093822381060.write((char *)&_9728777609121731073,sizeof(_9728777609121731073));
  _11093822381060.write((char *)&_4090819199315697352,sizeof(_4090819199315697352));
  auto _11093821926013 = _9129579858736004991.load();
  _11093822381060.write((char *)&_11093821926013,sizeof(_11093821926013));
  toStream__(_5860250156218117893.buffer_, _11093822381060);
  toStream__(_7124056634192091721, _11093822381060);
  toStream__(_2225497823225366210, _11093822381060);
  toStream__kv(_15327812228135655144, _11093822381060);
  _11093822381060.write((char *) &_13990461397173511559,sizeof( _13990461397173511559));
  _13909239728712143806.toStream(_11093822381060);
  _11093822381060.write((char *)&_1061304613240460439,sizeof(_1061304613240460439));
  _11093822381060.write((char *)&_11028815416989897150,sizeof(_11028815416989897150));
  _11093822381060.write(( char *)&_12303014364795142948,sizeof(_12303014364795142948));
  _11093822381060.write((char *)&_4098394392539754261, sizeof(_4098394392539754261));
  _8346364136266015358.toStream(_11093822381060);
}

void MapManager::fromStream(std::istream &_11093822381060)
{

  stop();
  uint64_t _11093822380353;
  _11093822381060.read((char *)&_11093822380353,sizeof(_11093822380353));

  if (_11093822380353 != 1823312417)
    throw std::runtime_error(string(__PRETTY_FUNCTION__) + "Could not read signature of Mapmanager in stream");

  _11093822381060.read((char *)&_5097784010653838202,sizeof(_5097784010653838202));
  _11093822381060.read((char *)&_9728777609121731073, sizeof(_9728777609121731073));
  _11093822381060.read((char *)&_4090819199315697352,sizeof(_4090819199315697352));

  auto _16987968640077875288 =_9129579858736004991.load();
  _11093822381060.read((char *)&_16987968640077875288,sizeof(_16987968640077875288));
  _9129579858736004991 = _16987968640077875288;

  fromStream__( _5860250156218117893.buffer_, _11093822381060);
  fromStream__(_7124056634192091721, _11093822381060);
  fromStream__(_2225497823225366210, _11093822381060);
  fromStream__kv(_15327812228135655144, _11093822381060);
  _11093822381060.read((char *)&_13990461397173511559,sizeof(_13990461397173511559));
  _13909239728712143806.fromStream(_11093822381060);
  _11093822381060.read((char *)&_1061304613240460439,sizeof( _1061304613240460439));
  _11093822381060.read((char *)&_11028815416989897150,sizeof(_11028815416989897150));
  _11093822381060.read((char *)&_12303014364795142948, sizeof(_12303014364795142948));
  _11093822381060.read((char *)&_4098394392539754261,sizeof(_4098394392539754261));
  _8346364136266015358.fromStream(_11093822381060);
}

uint64_t MapManager::getSignature()
{
  Hash _11093822380353;
  _11093822380353 += _5097784010653838202;
  _11093822380353 += _9728777609121731073;
  _11093822380353 += _4090819199315697352;
  _11093822380353 += _9129579858736004991.load();
  _11093822380353 += _5860250156218117893.size();

  for (auto _175247760284 : _7124056634192091721)
    _11093822380353 += _175247760284;

  for (auto _175247760284 : _2225497823225366210)
    _11093822380353 += _175247760284;

  for (auto _175247760284 : _15327812228135655144)
  {
    _11093822380353 += _175247760284.first;
    _11093822380353 += _175247760284.second;
  }
  _11093822380353 += _13990461397173511559;
  _11093822380353 += _13909239728712143806;
  _11093822380353 += _1061304613240460439;
  _11093822380353 += _11028815416989897150;
  _11093822380353 += _12303014364795142948;
  _11093822380353 += _8346364136266015358.getSignature();

  return _11093822380353;
}

void MapManager::_12244964123780599670 (Frame &_6807141023702418932, const LoopDetector::LoopClosureInfo &_11093822343890 )
{

  auto _46082543279161383 =[](const vector<uint32_t> &_2654435887){
    std::set<uint32_t> _2654435884;

    for (auto _2654435870 : _2654435887)
      _2654435884.insert(_2654435870);
    return _2654435884;
  };

  auto _5232059496476615978 = _3370013330161650239->TheKpGraph.getNeighborsV(_11093822343890.matchingFrameIdx, true);
  auto _5232059496475995487 =_3370013330161650239->TheKpGraph.getNeighborsV(_11093822343890.curRefFrame, true);
  auto&_16935669825082873233 =_6807141023702418932;

  if(!_3370013330161650239->keyframes.is(_6807141023702418932.idx)) 
  {

    _16935669825082873233.pose_f2g = _11093822343890.expectedPos;

    _16935669825082873233 = _1018502486064296669( &_6807141023702418932);
  }
  int _706246332364647 = 0;

  for ( auto _46082575882272165 : _11093822343890.map_matches) 
  {
    if(_16935669825082873233.ids[ _46082575882272165.queryIdx] ==std::numeric_limits<uint32_t>::max() &&
            !_3370013330161650239->map_points[_46082575882272165.trainIdx].isObservingFrame(_16935669825082873233.idx))
    {
      _3370013330161650239->addMapPointObservation(_46082575882272165.trainIdx, _16935669825082873233.idx,_46082575882272165.queryIdx);
      _706246332364647++;
    }
  }

  _10758134674558762512(20);

  auto _16937290651980367310 =_3370013330161650239->TheKpGraph.getNeighborsV( _16935669825082873233.idx, true);

  vector<float>_16988745808691518194 ={4, 2.5};

  for (size_t _175247759441 =0;_175247759441 <_16988745808691518194.size();_175247759441++)
  {
    _706246332364647 = 0;
    int _16937202366523037989 =0;

    for (auto _706246330143240 : _16937290651980367310)
    {
      auto &_16934301453639377411 =_3370013330161650239->keyframes[_706246330143240];
      auto _768618160192377675 = _46082543279161383( _16934301453639377411.getMapPoints());
      auto _637068542992099399 = _3370013330161650239->matchFrameToMapPoints(
              _16937290651980367310, _16934301453639377411,
              _16934301453639377411.pose_f2g, System::getParams().maxDescDistance *2,
              _16988745808691518194[_175247759441],false, true, _768618160192377675);

      for (auto _46082575882272165 : _637068542992099399)
      {
        if (_16934301453639377411.ids[_46082575882272165.queryIdx] != std::numeric_limits<uint32_t>::max())
        {
          _3370013330161650239->
              fuseMapPoints(_46082575882272165.trainIdx,_16934301453639377411.ids[_46082575882272165.queryIdx],true);
          _16937202366523037989++;
        }
        else 
        {
          _3370013330161650239->addMapPointObservation(_46082575882272165.trainIdx, _16934301453639377411.idx,
              _46082575882272165.queryIdx);
          _706246332364647++;
        }
      }
    }

    if (_706246332364647 > 0 || _16937202366523037989 > 0) 
    {

      _11362629803814604768( _16935669825082873233.idx, 20);

      _3370013330161650239->removeBadAssociations(_15944432432468226297->getBadAssociations(),
              System::getParams().minNumProjPoints);
    }
  }

  _6807141023702418932.pose_f2g = _16935669825082873233.pose_f2g;
  _6807141023702418932.ids = _16935669825082873233.ids;
}
}

